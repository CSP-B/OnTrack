MACHINE DJControlTable

/* Date: Thu Aug 07 14:04:52 BST 2014
 * Notes: supporting doubleJunction.bjoernercomplete model 
 * Automatically generated by TrackScheme2CSPB tool version 0.1
 * Authors of Tool: Phillip James and Matthew Trumble
 * Authors: Moller, Nguyen, Roggenbach, Schneider, Treharne
 * Corresponding Authors: S.Schneider@surrey.ac.uk, H.Treharne@surrey.ac.uk
 *
 */
 
[%
var bMachine1 = BMachine!Machine.all().first();
%]

SEES  DJContext

/*
 * normalTable: the points in a normal direction required for a route
 * reverseTable: the points in a reverse direction required for a route
 * clearTable: the set of tracks associated with a route (and need to be clear when a route is granted)
 *
 * lockTable: could be reduced but explicit inclusion makes model clearer
 */

CONSTANTS
    normalTable, 
    reverseTable, 
    clearTable, 
    lockTable

PROPERTIES
    normalTable :  ROUTE <-> POINTS &
    reverseTable : ROUTE <-> POINTS & 
    clearTable :   ROUTE --> POW(TRACK) &
    lockTable :    ROUTE <-> POINTS &

[%
for (p in bMachine1.hasProperties)
{
	out.println( p.write() );
}
%]

    lockTable = normalTable \/ reverseTable

END

[%

operation BMachine!BSet write() : String {

	var toReturn = "    " + self.name + " = {";
	
	for (el in self.hasSetElements)
	{
		toReturn = toReturn + el.name;
		
		if (hasMore) {toReturn = toReturn + ", ";}
	}
	
	toReturn = toReturn + "};";
	return toReturn;
}

operation BMachine!BSet writeElements() : String {
	
	var toReturn = "{";
	
	for (el in self.hasSetElements) {
	
		toReturn = toReturn + el.name;
		
		if (hasMore) {toReturn = toReturn + ",";}
	}
	
	toReturn = toReturn + "}";
	return toReturn;

}

operation BMachine!Property write() : String {
	
	var toReturn = "    " + self.name + " = {";
	
	for (pe in self.hasPropElements) {
		
		// print domain elements
		for (de in pe.hasDomainElements) {
			
			// if more than one element enclose in brackets
			if ((loopCount = 1) and hasMore) {toReturn = toReturn + "(";}
			
			toReturn = toReturn + de.name;
			if (hasMore) {toReturn = toReturn + ", ";}
				
			// close brackets if appropriate
			if ((not hasMore) and (loopCount > 1)) {toReturn = toReturn + ")";}
		}
		
		// if range set is present
		if (pe.hasRangeSet.isDefined()) {
			
			// print |->
			toReturn = toReturn + " |-> ";
			
			// print set
			toReturn = toReturn + pe.hasRangeSet.writeElements();
		}
		
		// print range elements
		for (re in pe.hasRangeElements) {
		
			// print |->
			if (loopCount = 1) {toReturn = toReturn + " |-> ";}
			
			// if more than one element enclose in brackets
			if ((loopCount = 1) and hasMore) {toReturn = toReturn + "(";}
			
			toReturn = toReturn + re.name;
			if (hasMore) {toReturn = toReturn + ", ";}
				
			// close brackets if appropriate
			if ((not hasMore) and (loopCount > 1)) {toReturn = toReturn + ")";}
		}
		
		if (hasMore) {toReturn = toReturn + ", ";}
	}
	
	toReturn = toReturn + "} &";
	return toReturn;
}

%]

